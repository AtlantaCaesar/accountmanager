package com.accountingmanager.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.accountingmanager.Sys.Model.AssetsElementModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSETS_ELEMENT_MODEL".
*/
public class AssetsElementModelDao extends AbstractDao<AssetsElementModel, Long> {

    public static final String TABLENAME = "ASSETS_ELEMENT_MODEL";

    /**
     * Properties of entity AssetsElementModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MenuIcon = new Property(1, Integer.class, "menuIcon", false, "MENU_ICON");
        public final static Property MenuName = new Property(2, String.class, "menuName", false, "MENU_NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property MenuType = new Property(4, String.class, "menuType", false, "MENU_TYPE");
        public final static Property Amount = new Property(5, String.class, "amount", false, "AMOUNT");
        public final static Property Mark = new Property(6, String.class, "mark", false, "MARK");
        public final static Property GroupName = new Property(7, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupIcon = new Property(8, Integer.class, "groupIcon", false, "GROUP_ICON");
    }


    public AssetsElementModelDao(DaoConfig config) {
        super(config);
    }
    
    public AssetsElementModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSETS_ELEMENT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MENU_ICON\" INTEGER," + // 1: menuIcon
                "\"MENU_NAME\" TEXT," + // 2: menuName
                "\"TYPE\" TEXT," + // 3: type
                "\"MENU_TYPE\" TEXT," + // 4: menuType
                "\"AMOUNT\" TEXT," + // 5: amount
                "\"MARK\" TEXT," + // 6: mark
                "\"GROUP_NAME\" TEXT," + // 7: groupName
                "\"GROUP_ICON\" INTEGER);"); // 8: groupIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSETS_ELEMENT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetsElementModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer menuIcon = entity.getMenuIcon();
        if (menuIcon != null) {
            stmt.bindLong(2, menuIcon);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(3, menuName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String menuType = entity.getMenuType();
        if (menuType != null) {
            stmt.bindString(5, menuType);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(8, groupName);
        }
 
        Integer groupIcon = entity.getGroupIcon();
        if (groupIcon != null) {
            stmt.bindLong(9, groupIcon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetsElementModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer menuIcon = entity.getMenuIcon();
        if (menuIcon != null) {
            stmt.bindLong(2, menuIcon);
        }
 
        String menuName = entity.getMenuName();
        if (menuName != null) {
            stmt.bindString(3, menuName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String menuType = entity.getMenuType();
        if (menuType != null) {
            stmt.bindString(5, menuType);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(7, mark);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(8, groupName);
        }
 
        Integer groupIcon = entity.getGroupIcon();
        if (groupIcon != null) {
            stmt.bindLong(9, groupIcon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetsElementModel readEntity(Cursor cursor, int offset) {
        AssetsElementModel entity = new AssetsElementModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // menuIcon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // menuName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // menuType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupName
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // groupIcon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetsElementModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenuIcon(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMenuName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMenuType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupIcon(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetsElementModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetsElementModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetsElementModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
